#!/bin/bash -e

# DEPENDS:
# * sudo
# * util-linux
# *rsync

# VARIABLES:
# PRODUCT_NAME=
# BUILD_VARIANT=      (user or userdebug or eng)
# BUILD_TYPE=      (release or debug)
# NUM_CORES=
# RELEASE_DOWNLOAD_ADDRESS=

echo ===Mapping keys/ to src/keys/=== >&2
rm -rf src/keys
cd src
ln -s ../keys keys

source script/copperhead.sh
choosecombo "$BUILD_TYPE" aosp_"$PRODUCT_NAME" "$BUILD_VARIANT"
set -x

echo ===Undergoing keying process=== >&2
if [ "$PRODUCT_NAME" == "taimen" ] ; then
  pushd keys/"$PRODUCT_NAME"
  for key in avb.pem media.pk8 media.x509.pem platform.pk8 platform.x509.pem releasekey.pk8 releasekey.x509.pem shared.pk8 shared.x509.pem ; do
    test -f $key || {
      echo "keys/$PRODUCT_NAME/$key cannot be found, generate it as per Android Verified Boot 2.0 CopperheadOS build instructions and place it in the build's keys/$PRODUCT_NAME directory, then retry" >&2
      exit 32
    }
  done
  ../../external/avb/avbtool extract_public_key --key avb.pem --output avb_pkmd.bin
  popd
else
  pushd keys/"$PRODUCT_NAME"
  for key in media.pk8 media.x509.pem platform.pk8 platform.x509.pem releasekey.pk8 releasekey.x509.pem shared.pk8 shared.x509.pem verity.pk8 verity.x509.pem ; do
    test -f $key || {
      echo "keys/$PRODUCT_NAME/$key cannot be found, generate it as per Android Verified Boot 1.x CopperheadOS build instructions and place it in the build's keys/$PRODUCT_NAME directory, then retry" >&2
      exit 32
    }
  done
  popd
  make -j20 generate_verity_key
  out/host/linux-x86/bin/generate_verity_key -convert keys/"$PRODUCT_NAME"/verity.x509.pem keys/"$PRODUCT_NAME"/verity_key
  openssl x509 -outform der -in keys/"$PRODUCT_NAME"/verity.x509.pem -out kernel/google/"$PRODUCT_NAME"/verity_user.der.x509
fi

# Rekey Android F-Droid privileged extension with build keys.
echo ===Adding this build release signing key to F-Droid=== >&2
releasefp=$(
keytool -list -printcert -file keys/"$PRODUCT_NAME"/releasekey.x509.pem | grep SHA256: | awk ' { print $2 } ' | sed 's/://g'
)
platformfp=$(
keytool -list -printcert -file keys/"$PRODUCT_NAME"/platform.x509.pem | grep SHA256: | awk ' { print $2 } ' | sed 's/://g'
)
pushd packages/apps/F-Droid/privileged-extension
git checkout app/src/main/java/org/fdroid/fdroid/privileged/ClientWhitelist.java
sed -i 's|// certificate SHA-256 of https//f-droid.org/FDroid.apk|// certificate SHA-256 of https//f-droid.org/FDroid.apk\n            new Pair<>("org.fdroid.fdroid", "'$releasefp'"), // this build releasekey|g' app/src/main/java/org/fdroid/fdroid/privileged/ClientWhitelist.java
sed -i 's|// certificate SHA-256 of https//f-droid.org/FDroid.apk|// certificate SHA-256 of https//f-droid.org/FDroid.apk\n            new Pair<>("org.fdroid.fdroid", "'$platformfp'"), // this build platform|g' app/src/main/java/org/fdroid/fdroid/privileged/ClientWhitelist.java
popd
# End rekey process.

# Reconfigure updater to point to release server.
if [ -n "$RELEASE_DOWNLOAD_ADDRESS" ] ; then
    echo ===Adding the release server download address to the Updater app=== >&2
    cat > ./packages/apps/Updater/res/values/config.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="url" translatable="false">$RELEASE_DOWNLOAD_ADDRESS</string>
    <string name="url_legacy" translatable="false">$RELEASE_DOWNLOAD_ADDRESS</string>
</resources>
EOF
fi
# End reconfigure updater process.

echo ===Making target files package=== >&2
make target-files-package -j"$NUM_CORES"

if [ "$PRODUCT_NAME" == "sailfish" -o "$PRODUCT_NAME" == "marlin" ] ; then
  echo ===Making Brillo update payload=== >&2
  make -j20 brillo_update_payload
fi
if [[ $PRODUCT_NAME != hikey*  ]]; then
  echo ===Making HiKey dumpkey=== >&2
  make -j20 dumpkey
fi
